
Guide
To start snapp!!!
in your html
file: index.html
<div id="Snapp-Body"></div>
<script type="module">
    import snapp from './Snapp.js' // import snapp
    import App from './src/index.js' // import your entery point

    const snappBody = document.querySelector("#Snapp-Body");
    snapp.render(snappBody, App()); // Start snapp
</script>

You can also inject varibale into your snapp app

const inject = "kigemmanuel";
snapp.render(snappBody, App(inject))

Then in your index.js

export default const App = (inject) => {
    alert(inject) // kigemmanuel
}

This is usesfull if you want inject varibale from backend whiling the file
But snapp is already SEO friend!!!

news.html
index.html
login.html

you can add your static template
using snapp helper function!

snapp.render Example:
snapp.render(parentElement, component, type) // To render a component
snapp.render(parentElement, component, 'append') // Will append
snapp.render(parentElement, component) // Default will replace what is on parentElement
Other types are 'prepend', 'after', 'before', 'replace'

snapp.on Example:
snapp.on(event, callBack)
snapp.on("DOM", callBack) // the callBack will run once the element is ready


snapp.select Example:
snapp.select() for single element
snapp.select([]) for multiple element return [array]


snapp.event Example:
const loadNewMsg = snapp.event(eventType, callBack)
const anotherEvent = snapp.event(eventType, callBack)

<div id="loadMsg" event{[
    [loadNewMsg]
    [anotherEvent]
]}></div>
Also you can pass parameter to your event!!
const loginBtn = snapp.event("click", (e, param) => {
    // e is the element that was click, e.target
    // param is for parameter

    console.log(param) // {id: 36392375923}
})
<div event={[loginBtn, {id: 36392375923}]}>Click Snapp</div>

Any time an element is remove from dom we also remove that element event instance!
But the snapp.event will still be avalible to all other unless you remove it by using snapp.remove(event)

event={[evnt]} // for single event
event={[[evntOne], [eventTwo]]} // for multiple event

Using snapp.event is a choice but its good if you have many button to have one event listner
snapp.event uses evnet delegation method it add one event to the document this is good for heavy app!!
To remove snapp.event use snapp.remove

const loginBtn = snapp.event(eventName, eventType, (e, param) => {
    // overwrite old  event
}, true)
snapp.remove([loginBtn]); // This will remove the event!
snapp.remove([loginBtn, anotherEvent])
Anytime you remove a evnet all element parameter that is attached to it gets cleanup!
Also the event delection also get cleanup if no event is listening to it!

onClick / onclick Example:
The eventListner will be added to the element!

<button onclick={() => alert("Hello Snapp")}>Call Hello snapp</button>
<button onClick={() => login()}>Login</button>
<button onclick={() => {
    // Do something
    // Do something
    // Do something
}}>Login</button>

Snapp cleanup: Snapp keeps track of each element and eventListner!
If an element is removed from the DOM, Snapp will remove all eventListner of that element

Snapp attribute Example:
Note snapp follows html attribute for sosmething 'double click' its same as html dblclick using doubleClick won't wotk!!
<button ondblclick={() => alert("Hiii")}>Login</button> // Will work
<button onDoubleClick={() => alert("Hiii")}>Login</button> // Won't work

Snapp uses html attribute naming for now, it do not care of camalCase or name
onClick is also same has onclick
Snapp will support both html/jsx style of attribute name....but for now it support html attribute name

Note attribute name like
"className" or "class" will work
"htmlFor" or "for" will work
All camalCase will bw read as lowercase
"onClick" as "onclick" etc.

snapp.remove Example:
snapp.remove is a way to remove element, event!

const [msgBody, feedBody] = snapp.select(["#msgBody", "mfeedBody"])
snapp.remove([msgBody]) // Will remove msgBody from the dom
const syaHello = snapp.event(eventName, eventType, evnt)
snapp.remove([syaHello]) // Will remove the event
snapp.remove([msgBody, feedBody, syaHello]) // will reomve msgBody, feedBody from DOM and remove syaHello event

snapp.css Example:
snapp.css is use to add style to an element

const divStyle = snapp.css({
    color: "red",
    backgorund: "red"
})
<div css={divStyle}>This is cool</div>
You can use "backgorund": "red" or even backgorund: "red"
const divStyle = snapp.css({
    "backgorund-color": "red"
})
More example
const darkMode = false;
const style = snapp.css({
    color: darkMode ? "white" : "black",
    "background-color": darkMode ? "black" : "white"
)}
<h2 css={style}>Hello Snapp</h2>


Creator: kigemmanuel
Free and open to issue,bugs report and your idea
